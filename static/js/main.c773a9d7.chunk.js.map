{"version":3,"sources":["utils/serviceWorker.ts","utils/localStorageManager.ts","utils/index.ts","store.ts","routes.tsx","models/AlphavantageGlobalQuoteStockInfo.ts","models/AlphavantageSymbolSearchCompany.ts","services/alphavantageService.ts","services/clearBitService.ts","modules/AddCompanyForm.tsx","modules/CompaniesList/CompanyInfo.tsx","modules/CompaniesList/index.ts","modules/CompaniesList/CompaniesList.tsx","modules/Navbar.tsx","App.tsx","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","navigator","URL","process","href","origin","addEventListener","swUrl","fetch","then","response","contentType","headers","get","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","console","log","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","JSON","parse","localStorage","getItem","companies","setItem","stringify","_serviceWorker","useStore","createUseContext","useState","localStorageManager","setCompanies","addCompany","useCallback","newCompany","prevCompanies","some","company","symbol","removeCompanyBySymbol","filter","useEffect","routes","routeLabels","hookrouterRoutes","AlphavantageGlobalQuoteStockInfo","apiResponseData","change","changePercent","high","latestTradingDay","low","open","previousClose","price","volume","globalQuote","this","AlphavantageSymbolSearchCompany","currency","marketClose","marketOpen","matchScore","name","region","timezone","type","alphavantageApi","axios","create","baseURL","params","apikey","keywords","function","mostAccureteResult","data","bestMatches","undefined","clearBitApi","dislikedPrefixesInName","formatForBetterQueryResults","reduce","result","prefix","split","join","trim","query","AddCompanyForm","companySymbol","setCompanySymbol","shouldShowError","setShouldShowError","handleCompanySymbolFieldChange","e","target","value","handleSubmit","a","preventDefault","alphavantageService","navigate","onSubmit","Group","Label","Control","isInvalid","onChange","placeholder","Text","className","variant","CompaniesInfo","alphavantageCompany","lazyLoadedInfo","setLazyLoadedInfo","Promise","all","clearBitService","stockInfo","clearbitCompany","isStockChangeNegative","isStockChangePositive","Number","width","height","src","logo","alt","Body","domain","Math","round","cx","_","length","map","Item","key","onClick","CompanyInfo","Navbar","navigateToAddCompanyRoute","navigateToCompaniesRoute","bg","expand","Brand","Toggle","aria-controls","Collapse","id","Link","App","useRedirect","route","useRoutes","ReactDOM","render","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.c773a9d7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { AlphavantageSymbolSearchCompany } from 'models'\n\nconst companiesLocalStorageKey = 'companies'\n\nconst getCompanies = () => JSON.parse(localStorage.getItem(companiesLocalStorageKey) || '[]')\n\nconst setCompanies = (companies: AlphavantageSymbolSearchCompany[]) =>\n  localStorage.setItem(companiesLocalStorageKey, JSON.stringify(companies))\n\nexport default { getCompanies, setCompanies }\n","import * as _serviceWorker from './serviceWorker'\n\nexport { default as localStorageManager } from './localStorageManager'\nexport const serviceWorker = _serviceWorker\n","import createUseContext from 'constate'\nimport { useState, useCallback, useEffect } from 'react'\n\nimport { AlphavantageSymbolSearchCompany } from 'models'\nimport { localStorageManager } from 'utils'\n\nconst useStoreHook = () => {\n  const [companies, setCompanies] = useState<AlphavantageSymbolSearchCompany[]>(\n    localStorageManager.getCompanies()\n  )\n\n  const addCompany = useCallback(\n    newCompany =>\n      setCompanies(prevCompanies =>\n        prevCompanies.some(company => newCompany.symbol === company.symbol)\n          ? prevCompanies\n          : [...prevCompanies, newCompany]\n      ),\n    [setCompanies]\n  )\n\n  const removeCompanyBySymbol = useCallback(\n    symbol =>\n      setCompanies(prevCompanies => prevCompanies.filter(company => symbol !== company.symbol)),\n    [setCompanies]\n  )\n\n  useEffect(() => localStorageManager.setCompanies(companies), [companies])\n\n  return { companies, addCompany, removeCompanyBySymbol }\n}\n\nexport const useStore = createUseContext(useStoreHook)\n","import React from 'react'\n\nimport { AddCompanyForm, CompaniesList } from 'modules'\n\nconst routes = {\n  companies: '/companies',\n  addCompany: '/addCompany'\n}\n\nexport const routeLabels: typeof routes = {\n  companies: 'Companies',\n  addCompany: 'Track new company'\n}\n\nexport const hookrouterRoutes = {\n  [routes.companies]: () => <CompaniesList />,\n  [routes.addCompany]: () => <AddCompanyForm />\n}\n\nexport default routes\n","import { AlphavantageGlobalQuoteResponseData } from 'types'\n\nexport default class AlphavantageGlobalQuoteStockInfo {\n  change: string\n  changePercent: string\n  high: string\n  latestTradingDay: string\n  low: string\n  open: string\n  previousClose: string\n  price: string\n  symbol: string\n  volume: string\n\n  constructor(apiResponseData: AlphavantageGlobalQuoteResponseData) {\n    const globalQuote = apiResponseData['Global Quote']\n\n    this.change = globalQuote['09. change']\n    this.changePercent = globalQuote['10. change percent']\n    this.high = globalQuote['03. high']\n    this.latestTradingDay = globalQuote['07. latest trading day']\n    this.low = globalQuote['04. low']\n    this.open = globalQuote['02. open']\n    this.previousClose = globalQuote['08. previous close']\n    this.price = globalQuote['05. price']\n    this.symbol = globalQuote['01. symbol']\n    this.volume = globalQuote['06. volume']\n  }\n}\n","import { AlphavantageSymbolSearchResponseCompany } from 'types'\n\nexport default class AlphavantageSymbolSearchCompany {\n  currency: string\n  marketClose: string\n  marketOpen: string\n  matchScore: string\n  name: string\n  region: string\n  symbol: string\n  timezone: string\n  type: string\n\n  constructor(company: AlphavantageSymbolSearchResponseCompany) {\n    this.currency = company['8. currency']\n    this.marketClose = company['6. marketClose']\n    this.marketOpen = company['5. marketOpen']\n    this.matchScore = company['9. matchScore']\n    this.name = company['2. name']\n    this.region = company['4. region']\n    this.symbol = company['1. symbol']\n    this.timezone = company['7. timezone']\n    this.type = company['3. type']\n  }\n}\n","import axios from 'axios'\n\nimport { AlphavantageSymbolSearchCompany, AlphavantageGlobalQuoteStockInfo } from 'models'\nimport { AlphavantageGlobalQuoteResponseData, AlphavantageSymbolSearchResponseData } from 'types'\n\nconst alphavantageApi = axios.create({\n  baseURL: 'https://www.alphavantage.co/query',\n  params: { apikey: process.env.REACT_APP_ALPHAVANTAGE_API_KEY }\n})\n\nconst getMostAccurateResultOfSearchingCompanyByKeywords = (keywords: string) =>\n  alphavantageApi\n    .get<AlphavantageSymbolSearchResponseData>('', {\n      params: { function: 'SYMBOL_SEARCH', keywords }\n    })\n    .then(response => {\n      const [mostAccureteResult] = response.data.bestMatches\n\n      return mostAccureteResult\n        ? new AlphavantageSymbolSearchCompany(mostAccureteResult)\n        : undefined\n    })\n\nconst getStockInfoBySymbol = (symbol: string) =>\n  alphavantageApi\n    .get<AlphavantageGlobalQuoteResponseData>('', { params: { function: 'GLOBAL_QUOTE', symbol } })\n    .then(response => new AlphavantageGlobalQuoteStockInfo(response.data))\n\nexport default { getMostAccurateResultOfSearchingCompanyByKeywords, getStockInfoBySymbol }\n","import axios from 'axios'\n\nimport { ClearbitCompaniesSuggestResponseData } from 'types'\n\nconst clearBitApi = axios.create({ baseURL: 'https://autocomplete.clearbit.com/v1/' })\n\nconst dislikedPrefixesInName = ['Inc.', 'L.P.']\n\nconst formatForBetterQueryResults = (name: string) =>\n  dislikedPrefixesInName.reduce(\n    (result, prefix) =>\n      result\n        .split(prefix)\n        .join('')\n        .trim(),\n    name\n  )\n\n// Since it's test, I had to use so meaningful name :)\nconst getMostAccurateResultOfSearchingCompanyByName = (name: string) =>\n  clearBitApi\n    .get<ClearbitCompaniesSuggestResponseData>('companies/suggest', {\n      params: {\n        query: formatForBetterQueryResults(name)\n      }\n    })\n    .then(response => {\n      const [mostAccurateResult] = response.data\n\n      return mostAccurateResult\n    })\n\nexport default { getMostAccurateResultOfSearchingCompanyByName }\n","import { navigate } from 'hookrouter'\nimport React, { useCallback, useState } from 'react'\nimport Button from 'react-bootstrap/Button'\nimport Form from 'react-bootstrap/Form'\n\nimport routes, { routeLabels } from 'routes'\nimport { alphavantageService } from 'services'\nimport { useStore } from 'store'\n\nconst AddCompanyForm = () => {\n  const [companySymbol, setCompanySymbol] = useState('')\n  const [shouldShowError, setShouldShowError] = useState(false)\n  const { addCompany } = useStore()\n\n  const handleCompanySymbolFieldChange = useCallback(e => setCompanySymbol(e.target.value), [\n    setCompanySymbol\n  ])\n\n  const handleSubmit = useCallback(\n    async e => {\n      e.preventDefault()\n\n      const newCompany = await alphavantageService.getMostAccurateResultOfSearchingCompanyByKeywords(\n        companySymbol\n      )\n\n      if (!newCompany) return setShouldShowError(true)\n\n      addCompany(newCompany)\n\n      navigate(routes.companies)\n    },\n    [companySymbol, addCompany, setShouldShowError]\n  )\n\n  return (\n    <>\n      <h2>{routeLabels.addCompany}</h2>\n\n      <Form onSubmit={handleSubmit}>\n        <Form.Group>\n          <Form.Label>Company symbol</Form.Label>\n\n          <Form.Control\n            isInvalid={shouldShowError}\n            onChange={handleCompanySymbolFieldChange}\n            placeholder=\"Company symbol\"\n            value={companySymbol}\n          />\n\n          <Form.Text className={shouldShowError ? 'text-danger' : 'text-muted'}>\n            {shouldShowError\n              ? 'No stock with provided symbol found'\n              : 'Provide the stock exchange symbol of a company you want to track'}\n          </Form.Text>\n        </Form.Group>\n\n        <Button variant=\"primary\" type=\"submit\">\n          Track\n        </Button>\n      </Form>\n    </>\n  )\n}\n\nexport default AddCompanyForm\n","import cx from 'classnames'\nimport React, { useState, useEffect, FC } from 'react'\nimport Media from 'react-bootstrap/Media'\n\nimport { AlphavantageGlobalQuoteStockInfo, AlphavantageSymbolSearchCompany } from 'models'\nimport { alphavantageService, clearBitService } from 'services'\nimport { ClearbitCompaniesSuggestCompany } from 'types'\n\ntype Props = { company: AlphavantageSymbolSearchCompany }\n\nconst CompaniesInfo: FC<Props> = ({ company: alphavantageCompany }) => {\n  const [lazyLoadedInfo, setLazyLoadedInfo] = useState<\n    (AlphavantageGlobalQuoteStockInfo & ClearbitCompaniesSuggestCompany) | undefined\n  >(undefined)\n\n  useEffect(() => {\n    Promise.all([\n      alphavantageService.getStockInfoBySymbol(alphavantageCompany.symbol),\n      clearBitService.getMostAccurateResultOfSearchingCompanyByName(alphavantageCompany.name)\n    ]).then(([stockInfo, clearbitCompany]) =>\n      setLazyLoadedInfo({\n        ...stockInfo,\n        ...clearbitCompany\n      })\n    )\n  }, [alphavantageCompany, setLazyLoadedInfo])\n\n  let isStockChangeNegative = false\n  let isStockChangePositive = false\n\n  if (lazyLoadedInfo) {\n    const change = Number(lazyLoadedInfo.change)\n\n    isStockChangeNegative = change < 0\n    isStockChangePositive = change > 0\n  }\n\n  return (\n    <Media>\n      <img\n        width={64}\n        height={64}\n        className=\"mr-3\"\n        src={lazyLoadedInfo ? lazyLoadedInfo.logo : undefined}\n        alt=\"Company logo\"\n      />\n\n      <Media.Body>\n        <h5 className=\"d-inline\">\n          <b>{alphavantageCompany.name}</b>\n        </h5>\n\n        <span className=\"ml-3\">{alphavantageCompany.symbol}</span>\n\n        {lazyLoadedInfo && <span className=\"ml-3\">{lazyLoadedInfo.domain}</span>}\n\n        <br />\n\n        <span>{alphavantageCompany.region}</span>\n\n        <span className=\"ml-3\">\n          {`${alphavantageCompany.marketOpen} - ${alphavantageCompany.marketClose} `}\n          {alphavantageCompany.timezone}\n        </span>\n\n        <br />\n\n        {lazyLoadedInfo && (\n          <>\n            <span>\n              <b>{`${Math.round(Number(lazyLoadedInfo.price) * 100) / 100} `}</b>\n              {alphavantageCompany.currency}\n            </span>\n            <span\n              className={cx([\n                'ml-3',\n                isStockChangeNegative && 'text-danger',\n                isStockChangePositive && 'text-success'\n              ])}\n            >\n              {`${lazyLoadedInfo.change} (${lazyLoadedInfo.changePercent})`}\n            </span>\n\n            {isStockChangeNegative && <span className=\"text-danger\">↓</span>}\n            {isStockChangePositive && <span className=\"text-success\">↑</span>}\n\n            <span className=\"ml-3\">{`Closed: ${lazyLoadedInfo.latestTradingDay}`}</span>\n          </>\n        )}\n      </Media.Body>\n    </Media>\n  )\n}\n\nexport default CompaniesInfo\n","import _ from './CompaniesList'\n\nexport default _\n","import { A } from 'hookrouter'\nimport React from 'react'\nimport ListGroup from 'react-bootstrap/ListGroup'\n\nimport routes, { routeLabels } from 'routes'\nimport { useStore } from 'store'\nimport CompanyInfo from './CompanyInfo'\n\nconst CompaniesList = () => {\n  const { companies, removeCompanyBySymbol } = useStore()\n\n  return (\n    <>\n      <h2>{routeLabels.companies}</h2>\n\n      {companies.length ? (\n        <ListGroup>\n          {companies.map(company => (\n            <ListGroup.Item key={company.symbol}>\n              <button\n                className=\"bg-transparent border-0 cursor-pointer float-right text-danger\"\n                onClick={() => removeCompanyBySymbol(company.symbol)}\n              >\n                ✖\n              </button>\n\n              <CompanyInfo company={company} />\n            </ListGroup.Item>\n          ))}\n        </ListGroup>\n      ) : (\n        <span>\n          There are no companies yet. <A href={routes.addCompany}>Track your first company.</A>{' '}\n        </span>\n      )}\n    </>\n  )\n}\n\nexport default CompaniesList\n","import { navigate } from 'hookrouter'\nimport React, { useCallback } from 'react'\nimport Container from 'react-bootstrap/Container'\nimport Nav from 'react-bootstrap/Nav'\nimport BootstrapNavbar from 'react-bootstrap/Navbar'\n\nimport routes, { routeLabels } from 'routes'\n\nconst Navbar = () => {\n  const navigateToAddCompanyRoute = useCallback(() => navigate(routes.addCompany), [])\n\n  const navigateToCompaniesRoute = useCallback(() => navigate(routes.companies), [])\n\n  return (\n    <BootstrapNavbar bg=\"light\" expand=\"lg\">\n      <Container>\n        <BootstrapNavbar.Brand href=\"#home\">Stock Tracker</BootstrapNavbar.Brand>\n\n        <BootstrapNavbar.Toggle aria-controls=\"basic-navbar-nav\" />\n\n        <BootstrapNavbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <Nav.Link onClick={navigateToAddCompanyRoute}>{routeLabels.addCompany}</Nav.Link>\n\n            <Nav.Link onClick={navigateToCompaniesRoute}>{routeLabels.companies}</Nav.Link>\n          </Nav>\n        </BootstrapNavbar.Collapse>\n      </Container>\n    </BootstrapNavbar>\n  )\n}\n\nexport default Navbar\n","import { useRoutes, useRedirect } from 'hookrouter'\nimport React from 'react'\nimport Container from 'react-bootstrap/Container'\n\nimport { Navbar } from 'modules'\nimport routes, { hookrouterRoutes } from 'routes'\n\nconst App = () => {\n  useRedirect('/', routes.companies)\n  const route = useRoutes(hookrouterRoutes)\n\n  return (\n    <>\n      <Navbar />\n\n      <br />\n\n      <Container>{route}</Container>\n    </>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nimport { useStore } from 'store'\nimport { serviceWorker } from 'utils'\nimport App from './App'\n\nimport './style.css'\n\nReactDOM.render(\n  <useStore.Provider>\n    <App />\n  </useStore.Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}